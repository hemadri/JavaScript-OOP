<?xml version="1.0" encoding="utf-8"?>
<!---
	 Skin class for Spark TextInput component that looks like Mac textboxes.
	 @see spark.components.TextInput
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
	alpha.disabled="0.5"
	blendMode="normal" xmlns:button="com.flexutil.ui.button.*">

	<fx:Metadata>
		<![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.TextInput")]
    ]]>
	</fx:Metadata>

	<fx:Script fb:purpose="styling">
		private var paddingChanged:Boolean;

		/* Define the skin elements that should not be colorized. */
		static private const exclusions:Array = ["background", "textDisplay"];

		/**
		 * @private
		 */
		override public function get colorizeExclusions():Array {
			return exclusions;
		}

		/* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
		static private const contentFill:Array = ["bgFill"];

		/**
		 *  @private
		 */
		override public function get contentItems():Array {
			return contentFill
		}
		;

		/**
		 *  @private
		 */
		override protected function commitProperties():void {
			super.commitProperties();

			if (paddingChanged) {
				updatePadding();
				paddingChanged = false;
			}
		}

		/**
		 * @private
		 */
		override protected function initializationComplete():void {
			useChromeColor = true;
			super.initializationComplete();
		}

		/**
		 *  @private
		 */
		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
			if (getStyle("borderVisible") == true) {
				border.visible = true;
			} else {
				border.visible = false;
			}

			borderStroke.color = getStyle("borderColor");
			borderStroke.alpha = getStyle("borderAlpha");

			super.updateDisplayList(unscaledWidth, unscaledHeight);
		}

		/**
		 *  @private
		 */
		private function updatePadding():void {
			if (!textDisplay)
				return;

			// Push padding styles into the textDisplay
			var padding:Number;

			padding = getStyle("paddingLeft");
			if (textDisplay.getStyle("paddingLeft") != padding)
				textDisplay.setStyle("paddingLeft", padding);

			padding = getStyle("paddingTop");
			if (textDisplay.getStyle("paddingTop") != padding)
				textDisplay.setStyle("paddingTop", padding);

			padding = getStyle("paddingRight");
			if (textDisplay.getStyle("paddingRight") != padding)
				textDisplay.setStyle("paddingRight", padding);

			padding = getStyle("paddingBottom");
			if (textDisplay.getStyle("paddingBottom") != padding)
				textDisplay.setStyle("paddingBottom", padding);
		}

		/**
		 *  @private
		 */
		override public function styleChanged(styleProp:String):void {
			var allStyles:Boolean = !styleProp || styleProp == "styleName";

			super.styleChanged(styleProp);

			if (allStyles || styleProp.indexOf("padding") == 0) {
				paddingChanged = true;
				invalidateProperties();
			}
		}
	</fx:Script>

	<fx:Script>
		<![CDATA[
			/**
			 * @private
			 */
			private static const focusExclusions:Array = ["textDisplay"];

			/**
			 *  @private
			 */
			override public function get focusSkinExclusions():Array {
				return focusExclusions;
			}
			;
		]]>
	</fx:Script>

	<s:states>
		<s:State name="normal"/>
		<s:State name="disabled"/>
	</s:states>

	<!-- border -->
	<!--- @private -->
	<s:Rect id="border"
		bottom="0"
		left="0"
		right="0"
		top="0"
		radiusX="10">
		<s:stroke>
			<!--- @private -->
			<s:SolidColorStroke id="borderStroke"
				color="0x808080"
				pixelHinting="true"
				weight="1"/>
		</s:stroke>
	</s:Rect>

	<!-- fill -->
	<!--- Defines the appearance of the TextInput component's background. -->
	<s:Rect id="background"
		bottom="1"
		left="1"
		right="1"
		top="1"
		radiusX="10">
		<s:fill>
			<!--- @private Defines the background fill color. -->
			<s:SolidColor id="bgFill"
				color="0xFFFFFF"/>
		</s:fill>
	</s:Rect>

	<s:BitmapImage id="searchImage"
		excludeFrom="disabled"
		height="13"
		source="@Embed(source='/assets/icons/magnifying_glass.png')"
		width="13"
		left="7"
		verticalCenter="0"/>

	<!-- text -->
	<!--- @copy spark.components.supportClasses.SkinnableTextBase#textDisplay -->
	<s:RichEditableText id="textDisplay"
		bottom="1"
		left="21"
		right="21"
		top="1"
		verticalAlign="middle"
		widthInChars="10"/>

	<button:SimpleIconButton id="clearImage"
		includeIn="normal"
		height="14"
		icon="@Embed(source='/assets/icons/mac_clear.png')"
		width="14"
		right="5"
		verticalCenter="0"
		click="hostComponent.text = ''"
		visible="{hostComponent.text.length > 0}"/>

</s:SparkSkin>
