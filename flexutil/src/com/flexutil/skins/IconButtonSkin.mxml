<?xml version="1.0" encoding="utf-8"?>
<!---
	 The default skin class for the IconButton component.
	 @see com.flexutil.ui.button.IconButton
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
	minHeight="21"
	minWidth="21"
	alpha.disabled="0.5">
	<fx:Metadata>[HostComponent("com.flexutil.ui.button.IconButton")]</fx:Metadata>

	<!-- host component -->
	<fx:Script fb:purpose="styling">
		<![CDATA[
			import mx.binding.utils.BindingUtils;

			import spark.layouts.VerticalLayout;
			import spark.layouts.supportClasses.LayoutBase;

			/* Define the skin elements that should not be colorized.
			 For button, the graphics are colorized but the label is not. */
			static private const exclusions:Array = ["labelDisplay", "icon"];

			private var labelPlacementChanged:Boolean;

			private var paddingChanged:Boolean;

			private var cornerRadius:Number = 2;

			override public function get colorizeExclusions():Array {
				return exclusions;
			}

			override protected function initializationComplete():void {
				useChromeColor = true;
				super.initializationComplete();
			}

			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				var cr:Number = getStyle("cornerRadius");

				if (cornerRadius != cr) {
					cornerRadius = cr;
					shadow.radiusX = cornerRadius;
					fill.radiusX = cornerRadius;
					lowlight.radiusX = cornerRadius;
					highlight.radiusX = cornerRadius;
					border.radiusX = cornerRadius;
				}

				if (highlightStroke)
					highlightStroke.radiusX = cornerRadius;
				if (hldownstroke1)
					hldownstroke1.radiusX = cornerRadius;
				if (hldownstroke2)
					hldownstroke2.radiusX = cornerRadius;

				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}

			override public function styleChanged(styleProp:String):void {
				var allStyles:Boolean = !styleProp || styleProp == "styleName";

				super.styleChanged(styleProp);

				if (allStyles || (styleProp == "labelPlacement")) {
					labelPlacementChanged = true;
					invalidateProperties();
				}
				if (allStyles || (styleProp.indexOf("padding") == 0)) {
					paddingChanged = true;
					invalidateProperties();
				}
			}

			override protected function commitProperties():void {
				super.commitProperties();

				// update the labelPlacement before the padding!
				if (labelPlacementChanged) {
					updateLabelPlacement();
					labelPlacementChanged = false;
				}
				if (paddingChanged) {
					updatePadding();
					paddingChanged = false;
				}
			}

			private function updateLabelPlacement():void {
				if (!group) {
					return;
				}

				var lp:String = getStyle("labelPlacement");
				if ((lp == "top") || (lp == "bottom")) {
					if (!(group.layout is VerticalLayout)) {
						var vLayout:VerticalLayout = new VerticalLayout();
						vLayout.horizontalAlign = "center";
						group.layout = vLayout;
						// need to update the padding on the new layout
						paddingChanged = true;
					}
				} else {
					if (!(group.layout is HorizontalLayout)) {
						var hLayout:HorizontalLayout = new HorizontalLayout();
						hLayout.verticalAlign = "middle";
						group.layout = hLayout;
						// need to update the padding on the new layout
						paddingChanged = true;
					}
				}
				// swap the icon and label if necessary
				var invert:Boolean = (lp == "top") || (lp == "left");
				var currentIndex:int = group.getElementIndex(icon);
				if (invert && (currentIndex == 0)) {
					group.setElementIndex(icon, 1);
				} else if (!invert && (currentIndex != 0)) {
					group.setElementIndex(icon, 0);
				}
			}

			private function updatePadding():void {
				if (!group || !group.layout) {
					return;
				}
				var layout:LayoutBase = group.layout;
				// Push padding styles into the layout (VerticalLayout or HorizontaLayout)
				var padding:Number = getStyle("paddingLeft");
				if (layout["paddingLeft"] != padding) {
					layout["paddingLeft"] = padding;
				}
				padding = getStyle("paddingTop");
				if (layout["paddingTop"] != padding) {
					layout["paddingTop"] = padding;
				}
				padding = getStyle("paddingRight");
				if (layout["paddingRight"] != padding) {
					layout["paddingRight"] = padding;
				}
				padding = getStyle("paddingBottom");
				if (layout["paddingBottom"] != padding) {
					layout["paddingBottom"] = padding;
				}
			}
		]]>
	</fx:Script>

	<!-- states -->
	<s:states>
		<s:State name="up"/>
		<s:State name="over"/>
		<s:State name="down"/>
		<s:State name="disabled"/>
	</s:states>

	<!-- layer 1: shadow -->
	<!--- @private -->
	<s:Rect id="shadow"
		bottom="-1"
		left="-1"
		right="-1"
		top="-1"
		radiusX="2">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x000000"
					color.down="0xFFFFFF"
					alpha="0.01"
					alpha.down="0"/>
				<s:GradientEntry color="0x000000"
					color.down="0xFFFFFF"
					alpha="0.07"
					alpha.down="0.5"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>

	<!-- layer 2: fill -->
	<!--- @private -->
	<s:Rect id="fill"
		bottom="1"
		left="1"
		right="1"
		top="1"
		radiusX="2">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xFFFFFF"
					color.down="0xAAAAAA"
					color.over="0xBBBDBD"
					alpha="0.85"/>
				<s:GradientEntry color="0xD8D8D8"
					color.down="0x929496"
					color.over="0x9FA0A1"
					alpha="0.85"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>

	<!-- layer 3: fill lowlight -->
	<!--- @private -->
	<s:Rect id="lowlight"
		bottom="1"
		left="1"
		right="1"
		top="1"
		radiusX="2">
		<s:fill>
			<s:LinearGradient rotation="270">
				<s:GradientEntry color="0x000000"
					alpha="0.0627"
					ratio="0.0"/>
				<s:GradientEntry color="0x000000"
					alpha="0.0099"
					ratio="0.48"/>
				<s:GradientEntry color="0x000000"
					alpha="0"
					ratio="0.48001"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>

	<!-- layer 4: fill highlight -->
	<!--- @private -->
	<s:Rect id="highlight"
		bottom="1"
		left="1"
		right="1"
		top="1"
		radiusX="2">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xFFFFFF"
					alpha="0.33"
					alpha.down="0.12"
					alpha.over="0.22"
					ratio="0.0"/>
				<s:GradientEntry color="0xFFFFFF"
					alpha="0.33"
					alpha.down="0.12"
					alpha.over="0.22"
					ratio="0.48"/>
				<s:GradientEntry color="0xFFFFFF"
					alpha="0"
					ratio="0.48001"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>

	<!-- layer 5: highlight stroke (all states except down) -->
	<!--- @private -->
	<s:Rect id="highlightStroke"
		excludeFrom="down"
		bottom="1"
		left="1"
		right="1"
		top="1"
		radiusX="2">
		<s:stroke>
			<s:LinearGradientStroke rotation="90"
				weight="1">
				<s:GradientEntry color="0xFFFFFF"
					alpha.over="0.22"/>
				<s:GradientEntry color="0xD8D8D8"
					alpha.over="0.22"/>
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>

	<!-- layer 6: highlight stroke (down state only) -->
	<!--- @private -->
	<s:Rect id="hldownstroke1"
		includeIn="down"
		bottom="1"
		left="1"
		right="1"
		top="1"
		radiusX="2">
		<s:stroke>
			<s:LinearGradientStroke rotation="90"
				weight="1">
				<s:GradientEntry color="0x000000"
					alpha="0.25"
					ratio="0.0"/>
				<s:GradientEntry color="0x000000"
					alpha="0.25"
					ratio="0.001"/>
				<s:GradientEntry color="0x000000"
					alpha="0.07"
					ratio="0.0011"/>
				<s:GradientEntry color="0x000000"
					alpha="0.07"
					ratio="0.965"/>
				<s:GradientEntry color="0x000000"
					alpha="0.00"
					ratio="0.9651"/>
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>
	<!--- @private -->
	<s:Rect id="hldownstroke2"
		includeIn="down"
		bottom="2"
		left="2"
		right="2"
		top="2"
		radiusX="2">
		<s:stroke>
			<s:LinearGradientStroke rotation="90"
				weight="1">
				<s:GradientEntry color="0x000000"
					alpha="0.09"
					ratio="0.0"/>
				<s:GradientEntry color="0x000000"
					alpha="0.00"
					ratio="0.0001"/>
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>

	<!-- layer 7: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
	<!--- @private -->
	<s:Rect id="border"
		height="20"
		width="69"
		bottom="0"
		left="0"
		right="0"
		top="0"
		radiusX="2">
		<s:stroke>
			<s:LinearGradientStroke rotation="90"
				weight="1">
				<s:GradientEntry color="0x000000"
					alpha="0.5625"
					alpha.down="0.6375"/>
				<s:GradientEntry color="0x000000"
					alpha="0.75"
					alpha.down="0.85"/>
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>

	<!-- layer 8: icon and text -->
	<s:Group id="group"
		horizontalCenter="0"
		verticalCenter="0">
		<s:layout>
			<s:HorizontalLayout verticalAlign="middle"/>
		</s:layout>

		<s:BitmapImage id="icon"
			includeInLayout="{hostComponent.getStyle('icon') != null}"
			source="{hostComponent.getStyle('icon')}"
			visible="{hostComponent.getStyle('icon') != null}"/>

		<!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
		<s:Label id="labelDisplay"
			includeInLayout="{( hostComponent.label != '' )}"
			textAlign="center"
			verticalAlign="middle"
			maxDisplayedLines="1"
			visible="{( hostComponent.label != '' )}">
		</s:Label>

	</s:Group>

</s:SparkSkin>
