<?xml version="1.0" encoding="utf-8"?>

<!--- The default skin class for the Spark Button component.  

       @see spark.components.Button
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009" minWidth="21" minHeight="21" alpha.disabled="0.5">
    
    <!-- host component -->
    <fx:Metadata>
        <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.Button")]
        ]]>
    </fx:Metadata>
    
    <fx:Script fb:purpose="styling">
        <![CDATA[         
            /* Define the skin elements that should not be colorized. 
            For button, the graphics are colorized but the label is not. */
            static private const exclusions:Array = ["labelDisplay"];
            
            /** 
             * @private
             */     
            override public function get colorizeExclusions():Array {return exclusions;}
            
            /**
             * @private
             */
            override protected function initializationComplete():void
            {
                useChromeColor = true;
                super.initializationComplete();
            }  
            
            /**
             *  @private
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
            {
                var cr:Number = getStyle("cornerRadius");
                
               /*  if (cornerRadius != cr)
                {
                    cornerRadius = cr;
                    shadow.radiusX = cornerRadius;
                    fill.radiusX = cornerRadius;
                    lowlight.radiusX = cornerRadius;
                    highlight.radiusX = cornerRadius;
                    border.radiusX = cornerRadius;
                }
                
                if (highlightStroke) highlightStroke.radiusX = cornerRadius;
                if (hldownstroke1) hldownstroke1.radiusX = cornerRadius;
                if (hldownstroke2) hldownstroke2.radiusX = cornerRadius; */
                
                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }
            
            private var cornerRadius:Number = 2;
        ]]>        
    </fx:Script>
	
	<fx:Declarations>
		<s:Linear id="easer1" easeInFraction=".35" easeOutFraction=".65" />
	</fx:Declarations>
	
	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over" stateGroups="overStates"/>
		<s:State name="down" stateGroups="overStates" />
		<s:State name="disabled" />
	</s:states>
	
	<!-- Transitions for the background gradient and the shadows between declared styles -->
	<s:transitions>
		<s:Transition  fromState="up" toState="over" autoReverse="true" >
				<s:AnimateColor  targets="{[ge1, ge2, ge3, ge4]}"  duration="250" />
		</s:Transition>
		
		<s:Transition  fromState="over" toState="up" autoReverse="true" >
				<s:AnimateColor targets="{[ge1, ge2, ge3, ge4]}" duration="750" />
		</s:Transition>
		<s:Transition  fromState="over" toState="down" autoReverse="true" >
			<s:Animate duration="150" targets="{[dsfBg]}" >
				<s:SimpleMotionPath  property="strength" />
			</s:Animate>
		</s:Transition>
		<s:Transition  fromState="down" toState="*" autoReverse="true" >
			<s:Animate duration="150" targets="{[dsfBg]}" >
				<s:SimpleMotionPath property="strength"  />
			</s:Animate>
		</s:Transition>
		<s:Transition  fromState="down" toState="*" autoReverse="true" >
			<s:Animate duration="150" targets="{[dsfBg]}" >
				<s:SimpleMotionPath property="strength"  />
			</s:Animate>
		</s:Transition>
	</s:transitions>
    
    <!--- @private -->
	<!-- The background gradient in greyscale, using lighter values on overstates (stateGroup) -->
	<s:Rect left="1" right="1" top="1" bottom="1" radiusX="4" radiusY="4">
		<s:filters>
			<s:DropShadowFilter id="dsfBg" alpha="0.5" blurX="0" blurY="0" distance="1" strength="1" strength.down="0"  />
		</s:filters>
		<s:fill>
			<s:LinearGradient  rotation="90">
				<s:GradientEntry id="ge1" color="#c0c0c0" color.overStates="#ffffff" ratio="0"/>
				<s:GradientEntry id="ge2" color="#939393" color.overStates="#e3e3e3" ratio="0.5"/>
				<s:GradientEntry id="ge3" color="#7e7e7e" color.overStates="#cecece" ratio="0.5"/>
				<s:GradientEntry id="ge4" color="#6a6a6a" color.overStates="#bbbbbb" ratio="1"/>
			</s:LinearGradient>
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke color="#ffffff"  weight="1"/>
		</s:stroke>
	</s:Rect>
    <!-- layer 8: text -->
    <!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
    <s:Label id="labelDisplay"
             textAlign="center"
             verticalAlign="middle" color="white" color.overStates="black" 
             maxDisplayedLines="1" paddingBottom="5"
             horizontalCenter="0" verticalCenter="1"
             left="10" right="10" top="2" bottom="2">
    </s:Label>
    
</s:SparkSkin>
